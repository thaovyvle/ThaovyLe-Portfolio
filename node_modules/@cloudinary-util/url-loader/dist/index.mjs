import {
  constructCloudinaryUrl,
  effects,
  position,
  primary,
  text,
  transformationPlugins
} from "./chunk-5DLOH2LF.mjs";

// src/lib/video-player.ts
import { parseUrl } from "@cloudinary-util/util";
function getVideoPlayerOptions(options, config) {
  const {
    autoplay,
    controls = true,
    height,
    language,
    languages,
    logo = true,
    loop = false,
    muted = false,
    poster,
    src,
    transformation,
    quality = "auto",
    width,
    ...otherCldVidPlayerOptions
  } = options;
  const { cloudName } = config?.cloud || {};
  const { secureDistribution, privateCdn } = config?.url || {};
  if (!cloudName) {
    throw new Error("A Cloudinary Cloud name is required, please make sure your environment variable is set and configured in your environment.");
  }
  let publicId = src || "";
  if (publicId.startsWith("http")) {
    try {
      const parts = parseUrl(src);
      if (typeof parts?.publicId === "string") {
        publicId = parts?.publicId;
      }
    } catch (e) {
    }
  }
  if (!publicId) {
    throw new Error("Video Player requires a src, please make sure to configure your src as a public ID or Cloudinary URL.");
  }
  const playerTransformations = Array.isArray(transformation) ? transformation : [transformation];
  playerTransformations.unshift({
    quality
  });
  let logoOptions = {};
  if (typeof logo === "boolean") {
    logoOptions.showLogo = logo;
  } else if (typeof logo === "object") {
    logoOptions = {
      ...logoOptions,
      showLogo: true,
      logoImageUrl: logo.imageUrl,
      logoOnclickUrl: logo.onClickUrl
    };
  }
  let autoplayValue = false;
  let autoplayModeValue = void 0;
  if (typeof autoplay === "boolean" || autoplay === "true" || autoplay === "false") {
    autoplayValue = autoplay;
  }
  if (typeof autoplay === "string" && autoplay !== "true" && autoplay !== "false") {
    autoplayModeValue = autoplay;
  }
  let playerOptions = {
    cloud_name: cloudName,
    privateCdn,
    secureDistribution,
    autoplayMode: autoplayModeValue,
    autoplay: autoplayValue,
    controls,
    language,
    languages,
    loop,
    muted,
    publicId,
    width,
    height,
    aspectRatio: `${width}:${height}`,
    transformation: playerTransformations,
    ...logoOptions,
    ...otherCldVidPlayerOptions
  };
  if (typeof poster === "string") {
    playerOptions.posterOptions = {
      publicId: poster
    };
  } else if (typeof poster === "object") {
    if (typeof poster.src !== "string") {
      playerOptions.posterOptions = {
        publicId: constructCloudinaryUrl({
          options: {
            ...poster,
            src: publicId,
            assetType: "video",
            format: "auto:image"
          },
          config
        })
      };
    } else {
      playerOptions.posterOptions = {
        publicId: constructCloudinaryUrl({
          options: poster,
          config
        })
      };
    }
  }
  return playerOptions;
}
export {
  constructCloudinaryUrl,
  effects,
  getVideoPlayerOptions,
  position,
  primary,
  text,
  transformationPlugins
};
