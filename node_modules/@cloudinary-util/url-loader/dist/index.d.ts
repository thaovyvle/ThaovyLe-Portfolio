import { C as ConstructUrlProps, a as ConfigOptions } from './schema-qgX3upLv.js';
export { b as AnalyticsOptions, A as AssetOptions, d as CloudinaryAnalyticsOptions, e as CloudinaryConfigurationOptions, I as ImageOptions, f as PluginOptions, g as PluginResults, P as PluginSettings, V as VideoOptions, c as constructCloudinaryUrl, t as transformationPlugins } from './schema-qgX3upLv.js';
import { CloudinaryVideoPlayerOptions, CloudinaryVideoPlayerOptionsLogo } from '@cloudinary-util/types';
import { z } from 'zod';
import '@cloudinary/url-gen/config/interfaces/Config/ICloudinaryAssetConfigurations';
import '@cloudinary/url-gen/sdkAnalytics/interfaces/IAnalyticsOptions';

/**
 * getVideoPlayerOptions
 */
type GetVideoPlayerOptions = Omit<CloudinaryVideoPlayerOptions, "cloud_name" | "autoplayMode" | "publicId" | "secure" | "showLogo" | "logoImageUrl" | "logoOnclickUrl"> & {
    logo?: boolean | GetVideoPlayerOptionsLogo;
    poster?: string | ConstructUrlProps["options"];
    src: string;
    quality?: string | number;
};
interface GetVideoPlayerOptionsLogo {
    imageUrl?: CloudinaryVideoPlayerOptionsLogo['logoImageUrl'];
    logo?: boolean;
    onClickUrl?: CloudinaryVideoPlayerOptionsLogo['logoOnclickUrl'];
}
declare function getVideoPlayerOptions(options: GetVideoPlayerOptions, config: ConfigOptions): CloudinaryVideoPlayerOptions;

declare const qualifierConvertersSchema: z.ZodObject<{
    convert: z.ZodFunction<z.ZodTuple<[z.ZodAny], z.ZodUnknown>, z.ZodAny>;
    test: z.ZodFunction<z.ZodTuple<[z.ZodAny], z.ZodUnknown>, z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    convert: (args_0: any, ...args_1: unknown[]) => any;
    test: (args_0: any, ...args_1: unknown[]) => boolean;
}, {
    convert: (args_0: any, ...args_1: unknown[]) => any;
    test: (args_0: any, ...args_1: unknown[]) => boolean;
}>;
type QualiferConverters = z.infer<typeof qualifierConvertersSchema>;
declare const qualifierSchema: z.ZodObject<{
    location: z.ZodOptional<z.ZodString>;
    order: z.ZodOptional<z.ZodNumber>;
    prefix: z.ZodOptional<z.ZodString>;
    qualifier: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodBoolean]>>;
    converters: z.ZodOptional<z.ZodArray<z.ZodObject<{
        convert: z.ZodFunction<z.ZodTuple<[z.ZodAny], z.ZodUnknown>, z.ZodAny>;
        test: z.ZodFunction<z.ZodTuple<[z.ZodAny], z.ZodUnknown>, z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        convert: (args_0: any, ...args_1: unknown[]) => any;
        test: (args_0: any, ...args_1: unknown[]) => boolean;
    }, {
        convert: (args_0: any, ...args_1: unknown[]) => any;
        test: (args_0: any, ...args_1: unknown[]) => boolean;
    }>, "many">>;
    schema: z.ZodAny;
}, "strip", z.ZodTypeAny, {
    location?: string | undefined;
    order?: number | undefined;
    prefix?: string | undefined;
    qualifier?: string | boolean | undefined;
    converters?: {
        convert: (args_0: any, ...args_1: unknown[]) => any;
        test: (args_0: any, ...args_1: unknown[]) => boolean;
    }[] | undefined;
    schema?: any;
}, {
    location?: string | undefined;
    order?: number | undefined;
    prefix?: string | undefined;
    qualifier?: string | boolean | undefined;
    converters?: {
        convert: (args_0: any, ...args_1: unknown[]) => any;
        test: (args_0: any, ...args_1: unknown[]) => boolean;
    }[] | undefined;
    schema?: any;
}>;
type Qualifier = z.infer<typeof qualifierSchema>;

declare const primary: Record<string, Qualifier>;
declare const position: Record<string, Qualifier>;
declare const text: Record<string, Qualifier>;
declare const effects: Record<string, Qualifier>;

export { ConfigOptions, ConstructUrlProps, type GetVideoPlayerOptions, type GetVideoPlayerOptionsLogo, type QualiferConverters, type Qualifier, effects, getVideoPlayerOptions, position, primary, text };
