var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class InvokeEvent extends Event {
  /** @param  {EventInit & { action?: string, relatedTarget: Element }} init */
  constructor({ action = "auto", relatedTarget, ...options }) {
    super("invoke", options);
    /** @type {string} */
    __publicField(this, "action");
    /** @type {Element} */
    __publicField(this, "relatedTarget");
    this.action = action;
    this.relatedTarget = relatedTarget;
  }
}
class ToggleEvent extends Event {
  /**
   * @param  {EventInit & { newState: 'open' | 'closed', oldState: 'open' | 'closed' }} init
   */
  constructor({ newState, oldState, ...options }) {
    super("toggle", options);
    /** @type {'open' | 'closed'} */
    __publicField(this, "newState");
    /** @type {'open' | 'closed'} */
    __publicField(this, "oldState");
    this.newState = newState;
    this.oldState = oldState;
  }
}
export {
  InvokeEvent,
  ToggleEvent
};
